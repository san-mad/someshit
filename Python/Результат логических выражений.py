'''


#Составные выражения

Если соединить логические выражения между собой, можно получать довольно интересные способы решения задач с кодом.

Допустим, нам нужно реализовать код, в котором в переменную записывается:

    Строка yes, если число четное
    Строка no, если нечетное

Это можно сделать, если использовать знания, полученные выше:

# число четное
result = 10 % 2 == 0 and 'yes' or 'no' # 'yes'
# или сразу печатаем на экран
print(10 % 2 == 0 and 'yes' or 'no') # => 'yes'
# число нечетное
print(11 % 2 == 0 and 'yes' or 'no') # => 'no'

Эти выражения работают согласно порядку и приоритетам. 
Приоритет присваивания самый низкий, поэтому оно происходит в конце.
Приоритет сравнения == выше, чем приоритет логических операторов and и or, 
поэтому сравнение происходит раньше. Дальше код выполняется слева направо, 
так как приоритет and выше, чем приоритет or. Рассмотрим по шагам:
    # Для четного
# 1 шаг
10 % 2 == 0 # True
# 2 шаг
True and 'yes' # Результат — 'yes'
# Проверка на or выполняется, но правая часть не исполняется, так как сразу возвращается 'yes'

# Для нечетного
# 1 шаг
11 % 2 == 0 # False
# 2 шаг
False and 'yes' # Результат — ложь, проверяем дальше
# 3 шаг
False or 'no' # Выбирается и возвращается 'no'

#Такую же схему можно использовать с любым выражением в начале:

print(somefunc() and 'yes' or 'no')


'''



