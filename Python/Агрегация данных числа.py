#Диапазон — ряд чисел от конкретного начала до определенного конца. Например, диапазон [1, 10] включает целые числа от одного до десяти.

#Пример:

#sum_numbers_from_range(5, 7)  # 5 + 6 + 7 = 18
#sum_numbers_from_range(1, 2)  # 1 + 2 = 3

# [1, 1] диапазон с одинаковым началом и концом — тоже диапазон
# Он включает одно число — саму границу диапазона
#sum_numbers_from_range(1, 1)      # 1
#sum_numbers_from_range(100, 100)  # 100

#Чтобы реализовать такой код, понадобится цикл, так как сложение чисел — это итеративный процесс, 
# то есть повторяется для каждого числа. Количество итераций зависит от размера диапазона.

'''

Посмотрите код ниже:

def sum_numbers_from_range(start, finish):
    # Технически можно менять start
    # Но входные аргументы нужно оставлять в исходном значении
    # Это сделает код проще для анализа
    i = start
    sum = 0  # Инициализация суммы
    while i <= finish:  # Двигаемся до конца диапазона
        sum = sum + i   # Считаем сумму для каждого числа
        i = i + 1       # Переходим к следующему числу в диапазоне
    # Возвращаем получившийся результат
    return sum
    
    
    '''
    
    
    
    
'''
    
    Главные отличия от обычной обработки — логика вычислений результата. В задачах на агрегацию всегда есть переменная, которая хранит внутри себя результат работы цикла. В коде выше это sum. Она изменяется на каждой итерации цикла — прибавляется следующее число в диапазоне: sum = sum + i.

Этот процесс выглядит так:

# Для вызова sum_numbers_from_range(2, 5)
sum = 0
sum = sum + 2  # 2
sum = sum + 3  # 5
sum = sum + 4  # 9
sum = sum + 5  # 14
# 14 – результат сложения чисел в диапазоне [2, 5]
    
    
    
    У переменной sum есть начальное значение — с него начинается любая повторяющаяся операция. В примере выше — это 0.
    
    
    '''
    
    
    
def multiply_numbers_from_range(start, finish):
    i = start
    product = 1  # Инициализация произведения
    while i <= finish:  # Двигаемся до конца диапазона
        product = product * i  # Считаем произведение для каждого числа
        i = i + 1  # Переходим к следующему числу в диапазоне
    return product
print(multiply_numbers_from_range(1, 5))
